#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('clonegar:server');
var http = require('http');
var playerNum = 1;
var currentRoomNum = 1;
var maxPlayersInRoom = 10;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
// added
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

// added
io.on('connection', function(client) {
	console.log('a user connected');

	// console.log(io.sockets.adapter.rooms);

	client.on('join', function(data) {

		console.log("new connection");
		var room = 'room' + currentRoomNum;
		client.join(room);

		if (io.sockets.adapter.rooms[room].length > maxPlayersInRoom) {
			console.log("Too many players, new room!");
			client.leave(room);
			currentRoomNum++;
			room = 'room' + currentRoomNum;
			// io.sockets.adapter.rooms.push(room);
			client.join(room);
			client.emit('room', room);
		}
		client.emit ('new player', {playerNum: playerNum});
		if (io.sockets.adapter.rooms[room].length === 1) {

			client.emit('first player');
		}
		console.log("Joined room " + room);
		console.log("Players in room: " + io.sockets.adapter.rooms[room].length);

		client.emit('playerNum', playerNum++);
		client.emit('room', room);
	});
	
	client.on ('ready', function (data){
		io.in (data.room).emit('ready', data);
	});

	client.on('chat message', function(data) {
		console.log("Got chat message: ");
		console.log(data);
		// client.emit('broadcast msg', data);
		// client.broadcast.emit('broadcast msg', data);
		// var room = io.sockets.manager.roomClients[client.id];
		var room = data.room;
		// client.in(client.room).emit ('broadcast msg', data);
		// client.in(client.room).broadcast.emit ('broadcast msg', data);
		io.in(room).emit('broadcast msg', data);
		// io.in (room).broadcast.emit ('broadcast msg', data);
	});
});

// Create the first room
// io.sockets.adapter.rooms.push('room' + currentRoomNum);

server.listen(port);
console.log("Listening on port " + port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	debug('Listening on ' + bind);
}
